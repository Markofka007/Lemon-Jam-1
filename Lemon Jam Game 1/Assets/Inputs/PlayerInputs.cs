//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Inputs/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""2b5d2c62-40e4-4889-94ab-75b944b15753"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e6f8723f-386b-4b0c-a703-f67b35f5948b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move2"",
                    ""type"": ""Button"",
                    ""id"": ""135829f2-281c-455e-bcca-8b541ded65cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""78e03480-e301-4f45-8443-a23e00c0c3b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump2"",
                    ""type"": ""Button"",
                    ""id"": ""964da0a9-406e-4f6e-a883-52441a0b5278"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Equip"",
                    ""type"": ""Button"",
                    ""id"": ""6cc84163-3915-4814-9066-cb49e67b1826"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Equip2"",
                    ""type"": ""Button"",
                    ""id"": ""b9eac536-e487-4e51-bd1e-965b51e7d32c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""63bb4a02-ac4b-48e0-83e5-7c5830109c0c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop2"",
                    ""type"": ""Button"",
                    ""id"": ""9affae34-1795-4a97-926b-ba798cda2585"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""e0a3044c-63db-420d-a6d3-7f90f771c7f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire2"",
                    ""type"": ""Button"",
                    ""id"": ""51d4c309-906f-4e20-960a-3122928b0909"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4c893f65-a185-4a66-af50-ce800ef3819d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""efa548e6-2dcd-4a40-b657-edb3de3a4d5a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""11d14841-0647-414f-bcea-25bc5aca5ff8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4311fc2a-6d1e-408c-857f-ece9f1cc0a66"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d72ae9f4-00cc-447a-b6ba-7e2aa195180e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c288b96-79fa-4a06-8f66-c7f6d224c6ec"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Equip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2d029d0-ec3c-4506-8290-c1e30044f325"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""LeftStickX"",
                    ""id"": ""c8a37e24-0ef0-4075-a96b-655c2c733f5a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a416124a-828c-49eb-b19e-e0e8ff57ae42"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Move2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6a0382a0-edcb-4dba-90b0-556b0679e150"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Move2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""17b912a1-a760-40de-a151-68107083a6b8"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Jump2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c450b6be-5ef5-467a-a3ed-7cf0920b42b5"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Equip2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca349bd7-e33e-49f2-9d6d-0b82e0143d0f"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Drop2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec6cdc34-c293-4ea2-abc7-cf743c2b3a2e"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Fire2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Items"",
            ""id"": ""ad217dc7-7ee4-4e63-827e-5dc3296e1e05"",
            ""actions"": [
                {
                    ""name"": ""Equip"",
                    ""type"": ""Button"",
                    ""id"": ""c7169029-7870-48a0-a66d-58e5f925e413"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""34ea8a61-23f1-4506-805f-7b19987f62f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Equip2"",
                    ""type"": ""Button"",
                    ""id"": ""b13045d7-0667-4b5b-b12b-0f1e68b294ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop2"",
                    ""type"": ""Button"",
                    ""id"": ""faaaca02-ef5a-490a-8e5e-5e70959d80a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f846b06b-88b7-48c8-9e0f-0757aa2ec17e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Equip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89772eeb-ff48-4648-844a-90ee218cf24d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f055bc54-2392-4bf6-8c94-c970df9ae204"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Equip2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14db0509-e6ad-4dcb-8115-96483c4743a2"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Drop2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KBM"",
            ""bindingGroup"": ""KBM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Move2 = m_Player.FindAction("Move2", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Jump2 = m_Player.FindAction("Jump2", throwIfNotFound: true);
        m_Player_Equip = m_Player.FindAction("Equip", throwIfNotFound: true);
        m_Player_Equip2 = m_Player.FindAction("Equip2", throwIfNotFound: true);
        m_Player_Drop = m_Player.FindAction("Drop", throwIfNotFound: true);
        m_Player_Drop2 = m_Player.FindAction("Drop2", throwIfNotFound: true);
        m_Player_Fire = m_Player.FindAction("Fire", throwIfNotFound: true);
        m_Player_Fire2 = m_Player.FindAction("Fire2", throwIfNotFound: true);
        // Items
        m_Items = asset.FindActionMap("Items", throwIfNotFound: true);
        m_Items_Equip = m_Items.FindAction("Equip", throwIfNotFound: true);
        m_Items_Drop = m_Items.FindAction("Drop", throwIfNotFound: true);
        m_Items_Equip2 = m_Items.FindAction("Equip2", throwIfNotFound: true);
        m_Items_Drop2 = m_Items.FindAction("Drop2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Move2;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Jump2;
    private readonly InputAction m_Player_Equip;
    private readonly InputAction m_Player_Equip2;
    private readonly InputAction m_Player_Drop;
    private readonly InputAction m_Player_Drop2;
    private readonly InputAction m_Player_Fire;
    private readonly InputAction m_Player_Fire2;
    public struct PlayerActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayerActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Move2 => m_Wrapper.m_Player_Move2;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Jump2 => m_Wrapper.m_Player_Jump2;
        public InputAction @Equip => m_Wrapper.m_Player_Equip;
        public InputAction @Equip2 => m_Wrapper.m_Player_Equip2;
        public InputAction @Drop => m_Wrapper.m_Player_Drop;
        public InputAction @Drop2 => m_Wrapper.m_Player_Drop2;
        public InputAction @Fire => m_Wrapper.m_Player_Fire;
        public InputAction @Fire2 => m_Wrapper.m_Player_Fire2;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move2.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove2;
                @Move2.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove2;
                @Move2.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove2;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump2.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump2;
                @Jump2.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump2;
                @Jump2.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump2;
                @Equip.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEquip;
                @Equip.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEquip;
                @Equip.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEquip;
                @Equip2.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEquip2;
                @Equip2.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEquip2;
                @Equip2.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEquip2;
                @Drop.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDrop;
                @Drop.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDrop;
                @Drop.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDrop;
                @Drop2.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDrop2;
                @Drop2.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDrop2;
                @Drop2.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDrop2;
                @Fire.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @Fire2.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire2;
                @Fire2.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire2;
                @Fire2.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire2;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Move2.started += instance.OnMove2;
                @Move2.performed += instance.OnMove2;
                @Move2.canceled += instance.OnMove2;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Jump2.started += instance.OnJump2;
                @Jump2.performed += instance.OnJump2;
                @Jump2.canceled += instance.OnJump2;
                @Equip.started += instance.OnEquip;
                @Equip.performed += instance.OnEquip;
                @Equip.canceled += instance.OnEquip;
                @Equip2.started += instance.OnEquip2;
                @Equip2.performed += instance.OnEquip2;
                @Equip2.canceled += instance.OnEquip2;
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
                @Drop2.started += instance.OnDrop2;
                @Drop2.performed += instance.OnDrop2;
                @Drop2.canceled += instance.OnDrop2;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Fire2.started += instance.OnFire2;
                @Fire2.performed += instance.OnFire2;
                @Fire2.canceled += instance.OnFire2;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Items
    private readonly InputActionMap m_Items;
    private IItemsActions m_ItemsActionsCallbackInterface;
    private readonly InputAction m_Items_Equip;
    private readonly InputAction m_Items_Drop;
    private readonly InputAction m_Items_Equip2;
    private readonly InputAction m_Items_Drop2;
    public struct ItemsActions
    {
        private @PlayerInputs m_Wrapper;
        public ItemsActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Equip => m_Wrapper.m_Items_Equip;
        public InputAction @Drop => m_Wrapper.m_Items_Drop;
        public InputAction @Equip2 => m_Wrapper.m_Items_Equip2;
        public InputAction @Drop2 => m_Wrapper.m_Items_Drop2;
        public InputActionMap Get() { return m_Wrapper.m_Items; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ItemsActions set) { return set.Get(); }
        public void SetCallbacks(IItemsActions instance)
        {
            if (m_Wrapper.m_ItemsActionsCallbackInterface != null)
            {
                @Equip.started -= m_Wrapper.m_ItemsActionsCallbackInterface.OnEquip;
                @Equip.performed -= m_Wrapper.m_ItemsActionsCallbackInterface.OnEquip;
                @Equip.canceled -= m_Wrapper.m_ItemsActionsCallbackInterface.OnEquip;
                @Drop.started -= m_Wrapper.m_ItemsActionsCallbackInterface.OnDrop;
                @Drop.performed -= m_Wrapper.m_ItemsActionsCallbackInterface.OnDrop;
                @Drop.canceled -= m_Wrapper.m_ItemsActionsCallbackInterface.OnDrop;
                @Equip2.started -= m_Wrapper.m_ItemsActionsCallbackInterface.OnEquip2;
                @Equip2.performed -= m_Wrapper.m_ItemsActionsCallbackInterface.OnEquip2;
                @Equip2.canceled -= m_Wrapper.m_ItemsActionsCallbackInterface.OnEquip2;
                @Drop2.started -= m_Wrapper.m_ItemsActionsCallbackInterface.OnDrop2;
                @Drop2.performed -= m_Wrapper.m_ItemsActionsCallbackInterface.OnDrop2;
                @Drop2.canceled -= m_Wrapper.m_ItemsActionsCallbackInterface.OnDrop2;
            }
            m_Wrapper.m_ItemsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Equip.started += instance.OnEquip;
                @Equip.performed += instance.OnEquip;
                @Equip.canceled += instance.OnEquip;
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
                @Equip2.started += instance.OnEquip2;
                @Equip2.performed += instance.OnEquip2;
                @Equip2.canceled += instance.OnEquip2;
                @Drop2.started += instance.OnDrop2;
                @Drop2.performed += instance.OnDrop2;
                @Drop2.canceled += instance.OnDrop2;
            }
        }
    }
    public ItemsActions @Items => new ItemsActions(this);
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KBM");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMove2(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnJump2(InputAction.CallbackContext context);
        void OnEquip(InputAction.CallbackContext context);
        void OnEquip2(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
        void OnDrop2(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnFire2(InputAction.CallbackContext context);
    }
    public interface IItemsActions
    {
        void OnEquip(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
        void OnEquip2(InputAction.CallbackContext context);
        void OnDrop2(InputAction.CallbackContext context);
    }
}
